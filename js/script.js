let questions = [];
let timer;
let timeLeft = 3600; // –û–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–µ—Å—Ç ‚Äî 1 —á–∞—Å (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
//let timeLeft = parseInt(params.get('time')) || 3600; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤—ã–±–æ—Ä –∏–ª–∏ 1 —á–∞—Å
let userAnswers = [];

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL ‚Äî subject (—Ç–µ–º–∞) –∏ count (–∫–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤)
const params = new URLSearchParams(window.location.search);
const subject = params.get('subject');
const count = parseInt(params.get('count')) || 200; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6 –≤–æ–ø—Ä–æ—Å–æ–≤

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
if (subject) {
  fetch('questions.json')
    .then(res => res.json())
    .then(data => {
      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
      questions = shuffleArray(data[subject]).slice(0, count);
      displayQuestions();   // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
      startTimer();         // –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
      document.getElementById("test-title").textContent = "Êó•Êú¨Ë™û„Ç™„É≥„É©„Ç§„É≥„ÉÜ„Çπ„ÉàÔºö " + subject;
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
function displayQuestions() {
  const container = document.getElementById("questions-container");

  questions.forEach((q, index) => {
    const div = document.createElement('div');
    div.className = 'question';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞
    let html = `<p><strong>${index + 1}. ${q.question}</strong></p>`;

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    if (q.image) {
      html += `<img src="${q.image}" alt="question image" style="max-width: 300px;"><br>`;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Äî –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    const options = shuffleArray(q.options.map((opt, i) => {
      return typeof opt === 'string'
        ? { text: opt, index: i }
        : { ...opt, index: i }; // –µ—Å–ª–∏ opt ‚Äî –æ–±—ä–µ–∫—Ç —Å text/image
    }));

    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    options.forEach(opt => {
      const id = `q${index}_o${opt.index}`;
      html += `<label><input type="radio" name="q${index}" value="${opt.index}">`;

      if (opt.image) {
        html += ` <img src="${opt.image}" alt="option image" style="max-width: 150px;">`;
      } else {
        html += ` ${opt.text}`;
      }

      html += `</label><br>`;
    });

    div.innerHTML = html;
    container.appendChild(div);
  });
}

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
function shuffleArray(arr) {
  return arr.sort(() => Math.random() - 0.5);
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
function startTimer() {
  const timerElem = document.getElementById("timer");
  timer = setInterval(() => {
    const minutes = String(Math.floor(timeLeft / 60)).padStart(2, '0');
    const seconds = String(timeLeft % 60).padStart(2, '0');
    timerElem.textContent = `${minutes}:${seconds}`;
    if (--timeLeft < 0) {
      clearInterval(timer);
      submitTest();
    }
  }, 1000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞
function submitTest() {
  clearInterval(timer);
  const allQuestions = document.querySelectorAll('.question');
  let correctCount = 0;
  userAnswers = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å
  questions.forEach((q, i) => {
    const selected = document.querySelector(`input[name="q${i}"]:checked`);
    const selectedIndex = selected ? parseInt(selected.value) : -1;
    userAnswers.push(selectedIndex);

    const options = allQuestions[i].querySelectorAll('input[type=radio]');
    options.forEach(opt => {
      const optIndex = parseInt(opt.value);
      const label = opt.parentElement;

      if (optIndex === q.answer) {
        label.classList.add('correct-answer');
      }

      if (opt.checked && optIndex === q.answer) {
        correctCount++;
        label.classList.add('correct');
      } else if (opt.checked && optIndex !== q.answer) {
        label.classList.add('incorrect');
      }

      opt.disabled = true;
    });
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const result = document.createElement('p');
  result.innerHTML = `<strong>Ê≠£Ëß£: ${questions.length} ÁÇπ‰∏≠ ${correctCount}ÁÇπ</strong>`;
  document.getElementById("questions-container").appendChild(result);

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
  displayAnswerComparison();
}

document.addEventListener('DOMContentLoaded', () => {
  const themeButton = document.getElementById('toggle-theme');
  const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É –∏–∑ localStorage –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
    document.body.classList.add('dark-mode');
    themeButton.textContent = '‚òÄÔ∏è'; //\u2600
  }

  themeButton.addEventListener('click', () => {
    document.body.classList.toggle('dark-mode');
    const isDark = document.body.classList.contains('dark-mode');

    themeButton.textContent = isDark ? '‚òÄÔ∏è' : 'üåô'; //\u2600   \u263C
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  });
});